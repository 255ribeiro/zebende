// const std = @import("std");

// // Although this function looks imperative, note that its job is to
// // declaratively construct a build graph that will be executed by an external
// pub fn build(b: *std.Build) void {
//     // Print all targets for debugging (optional)

//     // Standard target options allows the person running `zig build` to choose
//     // what target to build for. Here we do not override the defaults, which
//     // means any target is allowed, and the default is native. Other options
//     // for restricting supported target set are available.
//     const target = b.standardTargetOptions(.{});

//     // Standard optimization options allow the person running `zig build` to select
//     // between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall. Here we do not
//     // set a preferred release mode, allowing the user to decide how to optimize.
//     const optimize = b.standardOptimizeOption(.{});

//     // const src_file_name = "zebende_basic";
//     const src_file_name = "zebende_opt";

//     const lib = b.addSharedLibrary(.{
//         .target = target,
//         .optimize = optimize,
//         .name = "zebendezig",
//         // In this case the main source file is merely a path, however, in more
//         // complicated build scripts, this could be a generated file.

//         // .root_source_file = b.path("src/zebende_det_alloc_only.zig"),
//         // .root_source_file = b.path("src/zebende.zig"),
//         .root_source_file = b.path("src/" ++ src_file_name ++ ".zig"),

//         // .link_libc = true,
//     });

//     // This declares intent for the library to be installed into the standard
//     // location when the user invokes the "install" step (the default step when
//     // running `zig build`).

//     // lib.addIncludePath(".venv/");

//     b.installArtifact(lib);

//     //     // Creates a step for unit testing. This only builds the test executable
//     //     // but does not run it.
//     //     const lib_unit_tests = b.addTest(.{
//     //         .root_source_file = b.path("src/root.zig"),
//     //         .target = target,
//     //         .optimize = optimize,
//     //     });

//     //     const run_lib_unit_tests = b.addRunArtifact(lib_unit_tests);

//     //     const exe_unit_tests = b.addTest(.{
//     //         .root_source_file = b.path("src/main.zig"),
//     //         .target = target,
//     //         .optimize = optimize,
//     //     });

//     //     const run_exe_unit_tests = b.addRunArtifact(exe_unit_tests);

//     //     // Similar to creating the run step earlier, this exposes a `test` step to
//     //     // the `zig build --help` menu, providing a way for the user to request
//     //     // running the unit tests.
//     //     const test_step = b.step("test", "Run unit tests");
//     //     test_step.dependOn(&run_lib_unit_tests.step);
//     //     test_step.dependOn(&run_exe_unit_tests.step);

// }

const std = @import("std");

const targets: []const std.Target.Query = &.{
    .{ .cpu_arch = .aarch64, .os_tag = .macos },
    .{ .cpu_arch = .aarch64, .os_tag = .linux },
    .{ .cpu_arch = .x86_64, .os_tag = .linux, .abi = .gnu },
    .{ .cpu_arch = .x86_64, .os_tag = .linux, .abi = .musl },
    .{ .cpu_arch = .x86_64, .os_tag = .windows },
};

pub fn build(b: *std.Build) !void {
    for (targets) |t| {
        const exe = b.addSharedLibrary(.{
            .name = src_file_name,
            .root_source_file = b.path("src/" ++ src_file_name ++ ".zig"),
            .target = b.resolveTargetQuery(t),
            .optimize = .ReleaseSafe,
        });

        const target_output = b.addInstallArtifact(exe, .{
            .dest_dir = .{
                .override = .{
                    .custom = try t.zigTriple(b.allocator),
                },
            },
        });

        b.getInstallStep().dependOn(&target_output.step);
    }
}
